// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProdCate.Models;

namespace ProdCate.Migrations
{
    [DbContext(typeof(TheContext))]
    [Migration("20211216051959_UpdatedProdCateMigration")]
    partial class UpdatedProdCateMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProdCate.Models.Asso", b =>
                {
                    b.Property<int>("AssoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AssoId");

                    b.HasIndex("CateId");

                    b.HasIndex("ProdId");

                    b.ToTable("Assos");
                });

            modelBuilder.Entity("ProdCate.Models.Cate", b =>
                {
                    b.Property<int>("Cateid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ProdId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Cateid");

                    b.HasIndex("ProdId");

                    b.ToTable("Cates");
                });

            modelBuilder.Entity("ProdCate.Models.Prod", b =>
                {
                    b.Property<int>("ProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProdDescribe")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("ProdPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProdId");

                    b.ToTable("Prods");
                });

            modelBuilder.Entity("ProdCate.Models.Asso", b =>
                {
                    b.HasOne("ProdCate.Models.Cate", "CateWithProd")
                        .WithMany("AssignedProd")
                        .HasForeignKey("CateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdCate.Models.Prod", "ProdWithCate")
                        .WithMany("AssignedCate")
                        .HasForeignKey("ProdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProdCate.Models.Cate", b =>
                {
                    b.HasOne("ProdCate.Models.Prod", null)
                        .WithMany("AllCats")
                        .HasForeignKey("ProdId");
                });
#pragma warning restore 612, 618
        }
    }
}
